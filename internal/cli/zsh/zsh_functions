#!/usr/bin/env zsh

function transfer() {
  curl --progress-bar --upload-file "$1" "https://transfer.sh/$(basename $1)" |\
      tee /dev/null
}

function html-minifier() {
  html-minifier \
      --use-short-doctype \
      --sort-attributes \
      --sort-class-name \
      --collapse-whitespace \
      --remove-script-type-attributes \
      --remove-style-link-type-attributes \
      --remove-comments \
      --minify-css "" \
      --minify-js "" \
      --html5 \
      "$1";}

function js-minifier-safe() {
  uglifyjs \
      --ie8 \
      --keep-fnames \
      --compress "drop_console=true,\
                  sequences=true,\
                  properties=true,\
                  drop_debugger=true,\
                  conditionals=true,\
                  comparisons=true,\
                  evaluate=true,\
                  booleans=true,\
                  loops=true,\
                  unused=true,\
                  hoist_funs=true,\
                  hoist_vars=true,\
                  if_return=true,\
                  join_vars=true,\
                  cascade=true,\
                  warnings=true" \
      "$1";}

function js-minifier() {
  uglifyjs \
      --mangle \
      --compress "drop_console=true,\
                  sequences=true,\
                  properties=true,\
                  drop_debugger=true,\
                  conditionals=true,\
                  comparisons=true,\
                  evaluate=true,\
                  booleans=true,\
                  loops=true,\
                  unused=true,\
                  hoist_funs=true,\
                  hoist_vars=true,\
                  if_return=true,\
                  join_vars=true,\
                  cascade=true,\
                  warnings=true" \
      "$1";}

function encrypt() {
  keybase pgp encrypt -i "$1";}

function decrypt() {
  keybase pgp decrypt -i "$1";}

function ip() {
  curl -sL 'ipinfo.io';}

function gip() {
  curl --compressed -sL "http://www.geoiptool.com/en/?IP=$1" |\
      egrep -v 'marker_content' |\
      egrep 'marker_city|maker_country|marker_ip' |\
      grep -oP '(?<=\<div\>).*(?=\<\/div\>)' |\
      grep \:;}

function curlgrepdm() {
  local regx='https?://((\w|\d)+[./?=&;%-]*)+'
  curl -L "$1" | tac | tac | egrep -io "$regx" | sort -u;}

function curlgrepip() {
  local regx='([0-9]{,3}[.]){3}[0-9]{,3}'
  curl -L "$1" | tac | tac | egrep -oi "$regx" | sort -u;}

function curlgrepssl() {
  local server="$1"
  echo | openssl s_client -showcerts -servername "${server}" -connect "${server}:443" 2>/dev/null | openssl x509 -inform pem -noout -text;}

function sgn() {
  local signature="$(cat "$1" | sha512sum)"
  echo ${signature:0:10} > "$(basename "$1").sha512";}

function chk() {
  local f_name="$(basename "$1").sha512"
  [ -f "$f_name" ] && {
    local f_orig=$(sha512sum "$1" | cut -d" " -f1)
    local f_hash="$(cat "$f_name" | head -1 | awk '{print $0}')"
    local f_Hash=${f_orig:0:10}
    [[ $f_hash == $f_Hash ]] && {
      echo -e "\e[35m[\e[31m#\e[35m] \e[97mHash matched.\e[0m"
    }||{ echo -e "\e[35m[\e[31m!\e[35m] \e[97mHash mismatched.\e[0m";}
  }||{ echo -e '\e[35m[\e[31m#\e[35m] \e[97mHash src not found.\e[0m';};}

function xsgn() {
  echo $(cat "$1" | openssl dgst -sha256 -binary | openssl enc -base64 -A);}

function rsgn() {
  local signature="$(md5sum "$1" | awk '{print $1}')"
  local extension="$(echo "$1" | egrep -o '[.][a-z0-9]{3,}' | tail -1)"
  mv "$1" "${signature:0:10}$extension";}

function rchk() {
  local signature="$(md5sum "$1" | awk '{print $1}')"
  local extension="$(echo "$1" | egrep -o '[.][a-z0-9]{3,}' | tail -1)"
  local original=$(basename "$1")
  signature=${signature:0:10}
  original=${original:0:10}
  [[ $signature == $original ]] && {
    echo -e "\e[35m[\e[31m#\e[35m] \e[97mHash matched!\e[0m"
  }||{ echo -e "\e[35m[\e[31m!\e[35m] \e[97mHash mismatched -> $original.\e[0m";};}

function aptu() {
  local payload="
  ZnVuY3Rpb24gaW5pdCgpIHsKICBsb2NhbCB1c2FnZT0iXGVbOTJtW1xlWzkxbSFcZVs5Mm1dXGVb
  OTdtICQwIDxmbGFnPiA8dGFyZ2V0PlxlWzBtIgogIGxvY2FsIHF1ZXVlPSgKICAgICJ1cGRhdGUi
  CiAgICAidXBncmFkZSIKICAgICJhdXRvcmVtb3ZlIgogICk7CgogIGZ1bmN0aW9uIHVzYWdlKCkK
  ICB7IGVjaG8gLWUgIiR1c2FnZSImJmV4aXQgMTt9CgogIGZ1bmN0aW9uIHN0YXRlX2NoZWNrKCkK
  ICB7IFsgIiQoL3Vzci9iaW4vaWQgLXUpIiAtbmUgMCBdfHxyZXR1cm4gJD87fQoKICBmdW5jdGlv
  biBzdGF0ZV9raWxsKCkKICB7IHN0YXRlX2NoZWNrOyBbICQ/IC1uZSAwIF0mJnVzYWdlO30KCiAg
  aWYgW1sgJChzdGF0ZV9raWxsOyBlY2hvICQ/KSAtZXEgMSBdXQogIHRoZW4KICAgICAgZm9yICgo
  IGk9MDsgaTwkeyNxdWV1ZVtAXX07IGkrKyApKQogICAgICBkbwogICAgICAgIHN1ZG8gYXB0ICR7
  cXVldWVbaV19CiAgICAgIGRvbmUKICBmaQp9O2luaXQ="
  bash -c "$(echo -n "$payload" | tr -d '\n' | tr -d ' ' | base64 -d)";}

function gfd() {
  local payload="
  IyEvdXNyL2Jpbi9weXRob24KCmZyb20gdXJsbGliIGltcG9ydCB1cmxyZXRyaWV2ZQpmcm9tIG9z
  LnBhdGggaW1wb3J0IGlzZmlsZSxpc2Rpcgpmcm9tIG9zIGltcG9ydCBzeXN0ZW0gYXMgZm9yawpp
  bXBvcnQgcmVxdWVzdHMsdGFyZmlsZSxzaHV0aWwKCmNsYXNzIEdldE9iamVjdCgpOgoKICBkZWYg
  X19pbml0X18oc2VsZik6CiAgICBwcmludCgnWzAvNF0gaW5pdGlhbGl6aW5nLi4uJykKICAgIHNl
  bGYuUElORyAgICA9ICJodHRwczovL2Rvd25sb2FkLm1vemlsbGEub3JnLyIKICAgIHNlbGYuRFVS
  TCAgICA9ICJodHRwczovL2Rvd25sb2FkLm1vemlsbGEub3JnLz9wcm9kdWN0PWZpcmVmb3gtZGV2
  ZWRpdGlvbi1sYXRlc3Qtc3NsJm9zPWxpbnV4NjQmbGFuZz1lbi1VUyIKICAgIHNlbGYuQl9QQVRI
  ICA9ICIvdG1wLyIgICAgICAgICAjIGJhc2UgcGF0aAogICAgc2VsZi5EX1BBVEggID0gImZpcmVm
  b3gtZGV2LyIgICMgZGV2IHBhdGgKICAgIHNlbGYuRl9OQU1FICA9ICJmaXJlZm94IiAgICAgICAj
  IGZpbGVuYW1lCiAgICBzZWxmLkZfRVhUICAgPSAiLnRhci5neiIgICAgICAgIyBmaWxlIGV4dGVu
  c2lvbgogIGRlZiBfY2hlY2tVUkwoc2VsZik6CiAgICBwcmludCgnWzEvNF0gY2hlY2tpbmcgZW5k
  cG9pbnQuLi4nKQogICAgdHJ5OgogICAgICBpZiAyMDAgPT0gcmVxdWVzdHMuZ2V0KHNlbGYuUElO
  Rykuc3RhdHVzX2NvZGU6CiAgICAgICAgcHJpbnQoJz4gZW5kcG9pbnQgaXMgdXAhJykKICAgIGV4
  Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgcHJpbnQoJz4gZW5kcG9pbnQgaXMgZG93bi4uIDoo
  JykKICAgICAgZXhpdAogIGRlZiBfY2hlY2tPYmplY3RFeGlzdHMoc2VsZik6CiAgICBwcmludCgn
  WzIvNF0gY2hlY2tpbmcgaWYgb2JqZWN0IGV4aXN0cy4uLicpCiAgICBpZiBpc2ZpbGUoc2VsZi5C
  X1BBVEgrc2VsZi5GX05BTUUrc2VsZi5GX0VYVCk6CiAgICAgIHByaW50KCc+IG9iamVjdCBleGlz
  dHMhIFNraXBwaW5nICMzLicpCiAgICBlbHNlOgogICAgICBwcmludCgnPiBvYmplY3QgZG9lc25c
  J3QgZXhpc3QuLicpCiAgICAgIHNlbGYuX2Rvd25sb2FkT2JqZWN0KCkKICBkZWYgX2Rvd25sb2Fk
  T2JqZWN0KHNlbGYpOgogICAgcHJpbnQoJ1szLzRdIGRvd25sb2FkaW5nIG9iamVjdC4uLicpCiAg
  ICB1cmxyZXRyaWV2ZShzZWxmLkRVUkwsc2VsZi5CX1BBVEgrc2VsZi5GX05BTUUrc2VsZi5GX0VY
  VCkKICBkZWYgX2V4dHJhY3RPYmplY3Qoc2VsZik6CiAgICBwcmludCgnWzQvNF0gZXh0cmFjdGlu
  ZyBvYmplY3QuLi4nKQogICAgaWYgaXNkaXIoc2VsZi5CX1BBVEgrc2VsZi5EX1BBVEgpOgogICAg
  ICBwcmludCgnPiBjbGVhbmluZyBleGlzdGluZyBleHRyYWN0aW9uLi4uJykKICAgICAgc2h1dGls
  LnJtdHJlZShzZWxmLkJfUEFUSCtzZWxmLkRfUEFUSCkKICAgICAgZm9yaygnbWtkaXIgLXAgJytz
  ZWxmLkJfUEFUSCtzZWxmLkRfUEFUSCkKICAgIGlmIHRhcmZpbGUuaXNfdGFyZmlsZShzZWxmLkJf
  UEFUSCtzZWxmLkZfTkFNRStzZWxmLkZfRVhUKToKICAgICAgcHJpbnQoJz4gZXh0cmFjdGluZyBv
  YmplY3QuLi4nKQogICAgICB0PXRhcmZpbGUub3BlbihzZWxmLkJfUEFUSCtzZWxmLkZfTkFNRStz
  ZWxmLkZfRVhULCdyJykKICAgICAgdC5leHRyYWN0YWxsKHNlbGYuQl9QQVRIK3NlbGYuRF9QQVRI
  KQogICAgICB0LmNsb3NlKCkKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICBvPUdldE9iamVj
  dCgpCiAgby5fY2hlY2tVUkwoKQogIG8uX2NoZWNrT2JqZWN0RXhpc3RzKCkKICBvLl9leHRyYWN0
  T2JqZWN0KCkKICBwcmludCgnKyBmaW5pc2hlZCEnKQo="

  deactivate && source ~/.lib/pyradox2/bin/activate
  python -c "$(echo -n "$payload" | tr -d '\n' | tr -d ' ' | base64 -d)"
  deactivate && source ~/.lib/pyradox3/bin/activate
}
